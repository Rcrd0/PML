Method_A="ascorbic acid",
Method_B="Orange juice",
conf_interval_min=as.numeric(t.test(x = ToothGrowth[(ToothGrowth$supp == "VC" & ToothGrowth$dose == .5),]$len,y = ToothGrowth[(ToothGrowth$supp == "OJ" & ToothGrowth$dose == .5),]$len,paired = FALSE)$conf.int[[1]]),
conf_interval_max=as.numeric(t.test(x = ToothGrowth[(ToothGrowth$supp == "VC" & ToothGrowth$dose == .5),]$len,y = ToothGrowth[(ToothGrowth$supp == "OJ" & ToothGrowth$dose == .5),]$len,paired = FALSE)$conf.int[[2]]),
stringsAsFactors=FALSE) )
Result <- rbind(Result,data.frame(
Dose=1,
Method_A="ascorbic acid",
Method_B="Orange juice",
conf_interval_min=as.numeric(t.test(x = ToothGrowth[(ToothGrowth$supp == "VC" & ToothGrowth$dose == 1),]$len,y = ToothGrowth[(ToothGrowth$supp == "OJ" & ToothGrowth$dose == 1),]$len,paired = FALSE)$conf.int[[1]]),
conf_interval_max=as.numeric(t.test(x = ToothGrowth[(ToothGrowth$supp == "VC" & ToothGrowth$dose == 1),]$len,y = ToothGrowth[(ToothGrowth$supp == "OJ" & ToothGrowth$dose == 1),]$len,paired = FALSE)$conf.int[[2]]),
stringsAsFactors=FALSE) )
Result <- rbind(Result,data.frame(
Dose=2,
Method_A="ascorbic acid",
Method_B="Orange juice",
conf_interval_min=as.numeric(t.test(x = ToothGrowth[(ToothGrowth$supp == "VC" & ToothGrowth$dose == 2),]$len,y = ToothGrowth[(ToothGrowth$supp == "OJ" & ToothGrowth$dose == 2),]$len,paired = FALSE)$conf.int[[1]]),
conf_interval_max=as.numeric(t.test(x = ToothGrowth[(ToothGrowth$supp == "VC" & ToothGrowth$dose == 2),]$len,y = ToothGrowth[(ToothGrowth$supp == "OJ" & ToothGrowth$dose == 2),]$len,paired = FALSE)$conf.int[[2]]),
stringsAsFactors=FALSE) )
View(Result)
View(Result)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
xw
x*w
u = 0.0025
w*(x-u)
sum(w*(x-u))
u = 1.077
sum(w*(x-u))
sum(w*(x-u)^2)
u = 0.0025
sum(w*(x-u)^2)
u = 0.1471
sum(w*(x-u)^2)
u = 0.3
sum(w*(x-u)^2)
cor (x,w)
cor(w,x)
lm(w~x)
lm(x~w)
coefficients(x~w)
coefficients(x)
summary(lm(w~x))
x1 <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y1 <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(x~y))
summary(lm(x1~y1))
summary(lm(x1~x1))
summary(lm(x1~y1))
summary(lm(y1~x1))
data(mtcars)
summary(lm(mtcars$wt~mtcars$mpg))
summary(lm(mtcars$mpg~mtcars$wt))
slope(rbind(w,x))
lm(y1 ~ x1)$coeff[2]
lm(mtcar$mpg ~ mtcar$wt)$coeff[2]
lm(mtcars$mpg ~ mtcars$wt)$coeff[2]
cor(x~x)
cor(x,x)
u1=c1(1,1,1,1,1)
u1=c(1,1,1,1,1)
u2 = 1-u1
cor(u1,u2)
u1 = c(1,1,1,1,0,0,0,0)
u2 = 1-u1
cor(u1,u2)
coef(lm(mtcars$mpg ~ mtcars$wt))
coef(lm(mtcars$wt ~ mtcars$mpg))
var(mtcars$mpg)
var(mtcars$wt)
sd(mtcars$mpg)
sd(mtcars$wt)
cor(mtcars$wt,mtcars$mpg)
slope(lm(mtcars$wt~mtcars$mpg))
summary(lm(mtcars$wt~mtcars$mpg))
summary(lm(mtcars$mpg~mtcars$wt))
var(mtcars$mpg)/var(mtcars$wt)
2*sd(mtcars$mpg)/sd(mtcars$wt)
cor(mtcars$mpg,mtcars$wt)
5.3445/0.14086
summary(c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42))
z=c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
u = .573
sum((c-u)^2)
sum((z-u)^2)
u = .8
sum((z-u)^2)
u = .
u = .36
u = .
sum((z-u)^2)
u = .44
sum((z-u)^2)
z1=c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(z1)
var(z1)
z1-mean(z1)
(z1-mean(z1))/var(z)
(z1-mean(z1))/var(z1)
(z1-mean(z1))/sd(z1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x))
summary(lm(x~y))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(x~y))
summary(lm(y~x))
summary(lm(y~,offset = 0))
summary(lm(y~x,offset = 0))
summary(lm(y~x))
plot(x~y)
plot(y~x)
lines(y~x)
abline(lm(y~x))
plot(x,y)
abline(lm(y~x))
abline(lm(x~y))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(ml(y~0 + x))
summary(lm(y~0 + x))
cor(x,y)
data(mtcars)
fit<-lm(mpg~wt,mtcars)
summary(fit)
37.2851-5.3445*3
summary(fit)
newdata = data.frame(wt=3)
predict(fit,newdata,interval = "predict")
summary(lm(mpg~(wt/100),mtcars))
summary(lm(mtcars$mpg~(mtcars$wt/100)))
summary(lm(mtcars$mpg~mtcars$wt/100))
mtcars$wtd<-mtcars$wt/100
mtcars$mpgd<-mtcars$mpg/100
summary(lm(mpg~wtd,mtcars))
summary(fit)
summary(lm(mpgd~wt,mtcars))
data(mtcars)
head(mtcars)
mtcars$tsms<-as.factor(mtcars$am)
head(mtcars)
mtcars$tsms
levels(mtcars$tsms)
levels(mtcars$tsms)<-c("auto","manual")
mtcars$tsms
head(mtcars)
t.test(mtcars$mpg~mtcars$tsms)
mtcars[mtcars$am == 1 ,]
mtcars[mtcars$am == 0 ,]
t.test(mtcars$mpg~mtcars$tsms,paired = FALSE,subset = cyl)
t.test(mtcars$mpg~mtcars$tsms,paired = FALSE,subset = mtcars$cyl)
t.test(mtcars$mpg~mtcars$tsms,paired = FALSE)
mtcars4<-mtcars[mtcars$cyl == 4,]
mtcars6<-mtcars[mtcars$cyl == 6,]
mtcars8<-mtcars[mtcars$cyl == 8,]
t.test(mtcars4$mpg~mtcars4$tsms,paired = FALSE)
t.test(mtcars6$mpg~mtcars6$tsms,paired = FALSE)
t.test(mtcars8$mpg~mtcars8$tsms,paired = FALSE)
t.test(mtcars$mpg~mtcars$tsms,paired = FALSE)
lm(mpg~wt,mtcars4[mtcars4$am == 1,])
lm(mpg~wt,mtcars6[mtcars6$am == 1,])
lm(mpg~wt,mtcars4[mtcars4$am == 1,])
lm(mpg~wt,mtcars4[mtcars4$am == 0,])
lm(mpg~wt,mtcars4[mtcars6$am == 1,])
lm(mpg~wt,mtcars4[mtcars6$am == 0,])
lm(mpg~wt,mtcars4[mtcars8$am == 1,])
lm(mpg~wt,mtcars8[mtcars8$am == 1,])
lm(mpg~wt,mtcars8[mtcars8$am == 0,])
lm(mpg~wt,mtcars6[mtcars6$am == 1,])
lm(mpg~wt,mtcars6[mtcars6$am == 0,])
lm(mpg~wt+0,mtcars6[mtcars6$am == 0,])
lm(mpg~wt+0,mtcars6[mtcars6$am == 0,])
data(mtcars)
require(stats)
require(panel)
require(graphics)
require(graphics)
pairs(mtcars,panel = panel.smooth)
pairs(mtcars,panel = panel.smooth)
fit<-lm(mpg~wt+qsec+am,mtcars)
influence.measures(fit$residuals)
influence.measures(fit$coef)
influence.measures(fit)
mtcars
mtcars[5,]
mtcars[10,]
mtcars[20,]
mtcars[17,]
mtcars[15:17,]
mtcars[c(1:14,18:32),]
fit2>-lm(mpg~wt+qsec+factor(am),mtcars[c(1:14,18:32),])
fit2<-lm(mpg~wt+qsec+factor(am),mtcars[c(1:14,18:32),])
influence.measures(fit)
influence.measures(fit2)
plot(fit)
plot(fit$residuals)
dfbetas(fit)
hat(fit)
hat(fit$residuals)
pairs(fit)
pairs(fit$residuals)
plot(predict(fit),residuals(fit),pch = '.')
plot(predict(fit),residuals(fit),pch = 'o')
abline(predict(fit),residuals(fit))
abline(lm(predict(fit)~residuals(fit)))
abline(lm(resid(fit)~predict(fit)))
fit$coefficients
fit$effects
summary(fit)
fit$model
fit$terms
fit$fitted.values
fit$df.residual
summary(lm(mpg~.,mtcars))
summary(fit)$coefficients
summary(lm(mpg~wt+qsec+factor(am),mtcars))$coefficients
par(mfrow = c(2,2),oma = c(0,0,3,0),mar=c(0,4,4,0))
plot(fit)
title("Fig.1 Diagnosis plot for transmission model",outer = TRUE)
summary(lm(mpg~.,mtcars))
summary(lm(mpg~.,mtcars[,c(1,2,3,4,5,6,7,8,9,10,11)]))
summary(lm(mpg~.,mtcars[,c(1,2,3,4,5,6,7,8,9,10,11)]))$coefficients
summary(lm(mpg~.,mtcars[,c(1,,3,4,5,6,7,8,9,10,11)]))$coefficients
summary(lm(mpg~.,mtcars[,c(1,3,4,5,6,7,8,9,10,11)]))$coefficients
summary(lm(mpg~.,mtcars[,c(1,3,4,5,6,7,9,10,11)]))$coefficients
summary(lm(mpg~.,mtcars[,c(1,3,4,5,6,7,9,10)]))$coefficients
summary(lm(mpg~.,mtcars[,c(1,3,4,5,6,7,9)]))$coefficients
summary(lm(mpg~.,mtcars[,c(1,3,4,6,7,9)]))$coefficients
summary(lm(mpg~.,mtcars[,c(1,6,7,9)]))$coefficients
influence.measures(fit)
influence.measures(fit)$hat
hat(influence.measures(fit))
plot(lm(mpg~.,mtcars))
plot(lm(mpg~.,mtcars)$coef)
lm(mpg~.,mtcars)$coef
names(lm(mpg~.,mtcars)$coef)
plot(lm(mpg~.,mtcars)$coef,legend.text = names(lm(mpg~.,mtcars)$coef))
plot(lm(mpg~.,mtcars)$coef,xlab =  = names(lm(mpg~.,mtcars)$coef))
plot(lm(mpg~.,mtcars)$coef,xlab =names(lm(mpg~.,mtcars)$coef))
par(mfrow(1,1))
par(mfrow= c(1,1))
plot(lm(mpg~.,mtcars)$coef,xlab =names(lm(mpg~.,mtcars)$coef))
plot(rownames(lm(mpg~.,mtcars)$coef),lm(mpg~.,mtcars)$coef)
plot(rownames(lm(mpg~.,mtcars)$coef)
plot(rownames(lm(mpg~.,mtcars)$coef)
plot(rownames(lm(mpg~.,mtcars)$coef))
plot(names(lm(mpg~.,mtcars)$coef),lm(mpg~.,mtcars)$coef)
plot(predict(fit),residuals(fit),pch = 'o')
pairs(fit)
pairs(mtcars,panel = panel.smooth)
par()
par($oma)
par()$oma
par()$oma
par()$mar
dataset(mtcars)
data(mtcars)
boxplot(mpg~am,mtcars)
boxplot(mpg~am,mtcars,names(c("auto","manual")))
boxplot(mpg~am,mtcars,xlab(c("auto","manual")))
boxplot(mpg~factor(am),mtcars)
boxplot(mpg~factor(am),mtcars,main="Appendix. 2 Box plot for mpg by transmission type (0 auto, 1 manual")
lm(mpg-qsec-wt~am,mtcars)
plot(lm(mpg-qsec-wt~am,mtcars))
fito<-lm(mpg-qsec-wt~am,mtcars)
plot(mpg-qsec-wt~am,mtcars)
abline(fit0)
abline(fito)
library("MASS")
data(shuttle)
head(shuttle)
levels(as.factor(shuttle$use))
levels(as.factor(shuttle$head))
levels(as.factor(shuttle$wind))
fit<-glm(factor(use)~factor(wind),shuttle,family = binomial(logit))
summary(fit)
summary(shuttle[shuttle$use == "auto" & shuttle$wind == "tail",])
shuttle[shuttle$use == "auto" & shuttle$wind == "tail",]
a<-shuttle[shuttle$use == "auto" & shuttle$wind == "tail",]
b<-shuttle[shuttle$use == "noauto" & shuttle$wind == "tail",]
b<-shuttle[shuttle$use == "noauto" & shuttle$wind == "head",]
b<-shuttle[shuttle$use == "noauto" & shuttle$wind == "tail",]
c<-shuttle[shuttle$use == "noauto" & shuttle$wind == "head",]
d<-shuttle[shuttle$use == "auto" & shuttle$wind == "head",]
data(mtcars)
head(mtcars)
exit
quit
data(mtcars)
plot(mtcars)
step(mtcars)
step(lm(mpg~.,mtcars))
summary(step(lm(mpg~.,mtcars)))
summary(step(lm(mpg~.,mtcars)))$Coefficients
step(lm(mpg~.,mtcars))$Coefficients
step(lm(mpg~.,mtcars))
coef(step(lm(mpg~.,mtcars)))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
install.packages("rCharts")
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
head(airquality)
airquality
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
library("rCharts")
library(rCharts)
library("rCharts")
install.packages("rCharts")
intall.package("shiny")
intall.packages("shiny")
install.packages("shiny")
library(shiny)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
train<-read.csv(file = "train.csv")
test<-read.csv("test.csv")
library(randomForest)
library(rpart)
library(caret)
install.package("carte")
install.packages("caret")
require("predict")
require("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
dim(train)
nb_na <- sapply(train, function(x) {sum(is.na(x))})
dim(nb_na)
table(nb_na)
train<-train[,(nb_na!=19216)]
colnames(train)
train<-train[,-c(1:7)]
colnames(train)
fit1<-randomForest(classe~.,train)
as.numeric(as.character(train$amplitude_yaw_forearm))
train2<-as.numeric(as.character(train[,c(1:85)]))
as.numeric(as.character(train[,c(1:85)]))
train2<-as.numeric(as.character(train[,1:85]))
for (i in 1:85 ) {
as.numeric(as.character(train[,i]))
}
warnings
warnings()
for (i in 1:85 ) {
head(as.numeric(as.character(train[,i])))
}
train2<-train
for (i in 1:85 ) {
train2[,i]<-(as.numeric(as.character(train[,i])))
}
train<-read.csv(file = "train.csv")
colnames(train)
View(test)
for (i in 1:159 ) {
train[,i]<-(as.numeric(as.character(train[,i])))
}
levels(train$classe)
nb_na <- sapply(train, function(x) {sum(is.na(x))})
train<-train[,(nb_na!=19216)]
dim(nb_na)
table(nb_na)
train<-read.csv(file = "train.csv")
for (i in 1:159 ) {
train[,i]<-(as.numeric(as.character(train[,i])))
}
nb_na <- sapply(train, function(x) {sum(is.na(x))})
table(nb_na)
train<-train[,(nb_na>=19216)]
train<-read.csv(file = "train.csv")
for (i in 1:159 ) {
train[,i]<-(as.numeric(as.character(train[,i])))
}
nb_na <- sapply(train, function(x) {sum(is.na(x))})
train<-train[,(nb_na<19216)]
tran<-train[,-1]
train<-train[,-1]
View(tran)
train<-read.csv(file = "train.csv")
test<-read.csv("test.csv")
for (i in 1:159 ) {
train[,i]<-(as.numeric(as.character(train[,i])))
}
nb_na <- sapply(train, function(x) {sum(is.na(x))})
train<-train[,(nb_na<19216)]
train<-train[,-c(1:4)]
fit1<-randomForest(classe~., data=train)
fit2<-rpart(classe~., train, method="class")
pred1 <- predict(fit1, test, type="class")
pred2 <- predict(fit1, test, type="class")
confusionMatrix(pred1, test$classe)
library(caret)
library(AppliedPredictiveModeling)
confusionMatrix(pred1, test$classe)
levels(test$classe)
test$classe
train<-read.csv(file = "train.csv")
test<-read.csv("test.csv")
for (i in 1:159 ) {
train[,i]<-(as.numeric(as.character(train[,i])))
}
nb_na <- sapply(train, function(x) {sum(is.na(x))})
train<-train[,(nb_na<19216)]
train<-train[,-c(1:4)]
inTrain <- createDataPartition(y=data$classe, p=0.6, list=FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
fit1<-randomForest(classe~., training)
fit2<-rpart(classe~., training, method="class")
pred1 <- predict(fit1, testing, type="class")
pred2 <- predict(fit2, testing, type="class")
confusionMatrix(pred1, testing$classe)
confusionMatrix(pred2, testing$classe)
inTrain <- createDataPartition(y = train$classe,p=0.6,list=FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
fit1<-randomForest(classe~., training)
fit2<-rpart(classe~., training, method="class")
pred1 <- predict(fit1, testing, type="class")
pred2 <- predict(fit2, testing, type="class")
confusionMatrix(pred1, testing$classe)
confusionMatrix(pred2, testing$classe)
training <- train[inTrain, ]
testing <- train[-inTrain, ]
fit1<-randomForest(classe~., training)
fit2<-rpart(classe~., training, method="class")
pred1 <- predict(fit1, testing, type="class")
pred2 <- predict(fit2, testing, type="class")
confusionMatrix(pred1, testing$classe)
confusionMatrix(pred2, testing$classe)
install.package("e1071")
install.packages("e1071")
library(e1071)
confusionMatrix(pred1, testing$classe)
confusionMatrix(pred2, testing$classe)
preda <- predict(fit1, test, type="class")
preda<-as.character(preda)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(preda)
setwd("D:/PML")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",“train.csv",method = "wb"")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",“train.csv",method = "wb")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","train.csv",method = "wb")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","train.csv",mode = "wb")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","test.csv",mode = "wb")
data <- read.csv("pml-training.csv", sep=",", na.strings=c("NA",""), header=TRUE)
dim(data)
data <- read.csv("training.csv", sep=",", na.strings=c("NA",""), header=TRUE)
dim(data)
data <- read.csv("train.csv", sep=",", na.strings=c("NA",""), header=TRUE)
dim(data)
table(data$classe)
dim(nb_na)
table(nb_na)
confusionMatrix(pred1, testing$classe)
a<-confusionMatrix(pred1, testing$classe)
a$overall
confusionMatrix(pred1, testing$classe)$overall
set.seed(33533)
confusionMatrix(pred2, testing$classe)$overall
confusionMatrix(pred2, testing$classe)
summary(fit1)
plot(fit1)
plot(fit2)
text(fit2, use.n=TRUE, all=TRUE, cex=.8)
plot(fit2, uniform=TRUE)
text(fit2, use.n=TRUE, all=TRUE, cex=.8)
plot(fit2, uniform=TRUE)
text(fit2, use.n=TRUE, all=TRUE, cex=1)
plot(fit2, uniform=TRUE)
text(fit2, use.n=TRUE, all=TRUE, cex=.4)
plot(fit2, uniform=TRUE)
text(fit2, use.n=TRUE, all=TRUE, cex=.5)
cforest(Species ~ ., data=iris, controls=cforest_control(mtry=2, mincriterion=0))
libraray(cForest)
library(cForest)
install.packages("cForest")
